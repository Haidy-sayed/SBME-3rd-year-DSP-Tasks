# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Task4GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import matplotlib as mpl
from matplotlib.backends.backend_agg import FigureCanvasAgg

from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QDesktopWidget


from PyQt5.QtWidgets import * 

from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np

from playsound import playsound
from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QApplication, QColorDialog, QFileDialog, QFrame, QWidget, QInputDialog, QLineEdit,QComboBox
import os
import numpy as np
from PyQt5.QtWidgets import QMessageBox
import sys 
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QColorDialog
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtGui import QColor ,QKeySequence
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from pyqtgraph.graphicsItems.ScatterPlotItem import Symbols
from pyqtgraph.graphicsItems.ImageItem import ImageItem
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import cv2
import io
from numpy.fft import fft, fftfreq, ifft
from scipy.fftpack import fft, ifft
from scipy import signal
import cmath
from scipy.io.wavfile import write
from pyqtgraph import PlotWidget
from PyQt5 import QtCore, QtGui, QtWidgets
import pyqtgraph.exporters
from fpdf import FPDF
import statistics
from pyqtgraph import PlotWidget
import pyqtgraph
from pyqtgraph import *
import pyqtgraph as pg
from pyqtgraph import PlotWidget, PlotItem
#from matplotlib.pyplot import draw
import matplotlib.pyplot as plt
from scipy.fftpack import fft, ifft
import pandas as pd
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QApplication, QColorDialog, QFileDialog, QFrame, QWidget, QInputDialog, QLineEdit,QComboBox
import os
import numpy as np
from PyQt5.QtWidgets import QMessageBox
import sys 
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QColorDialog
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtGui import QColor
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from pyqtgraph.graphicsItems.ScatterPlotItem import Symbols
from pyqtgraph.graphicsItems.ImageItem import ImageItem
from matplotlib.figure import Figure
import io
from numpy.fft import fft, fftfreq, ifft
from scipy.fftpack import fft, ifft
from scipy import signal
import cmath
import cv2
pg.setConfigOption('background', 'w')


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(954, 685)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.FittingOptionsContianer = QtWidgets.QWidget(self.centralwidget)
        self.FittingOptionsContianer.setMaximumSize(QtCore.QSize(150, 16777215))
        self.FittingOptionsContianer.setObjectName("FittingOptionsContianer")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.FittingOptionsContianer)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.FittingOptionsLabel = QtWidgets.QLabel(self.FittingOptionsContianer)
        self.FittingOptionsLabel.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.FittingOptionsLabel.setFont(font)
        self.FittingOptionsLabel.setObjectName("FittingOptionsLabel")
        self.verticalLayout_2.addWidget(self.FittingOptionsLabel)
        self.toolBox = QtWidgets.QToolBox(self.FittingOptionsContianer)
        self.toolBox.setObjectName("toolBox")
        self.page = QtWidgets.QWidget()
        self.page.setGeometry(QtCore.QRect(0, 0, 132, 448))
        self.page.setObjectName("page")
        self.label_3 = QtWidgets.QLabel(self.page)
        self.label_3.setGeometry(QtCore.QRect(0, 100, 121, 20))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.ExtrapolationEfficiencySlider = QtWidgets.QSlider(self.page)
        self.ExtrapolationEfficiencySlider.setGeometry(QtCore.QRect(50, 140, 22, 231))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.ExtrapolationEfficiencySlider.setFont(font)
        self.ExtrapolationEfficiencySlider.setMinimum(1)
        self.ExtrapolationEfficiencySlider.setMaximum(10)
        self.ExtrapolationEfficiencySlider.setSingleStep(1)
        self.ExtrapolationEfficiencySlider.setPageStep(1)
        self.ExtrapolationEfficiencySlider.setSliderPosition(10)
        self.ExtrapolationEfficiencySlider.setTracking(True)
        self.ExtrapolationEfficiencySlider.setOrientation(QtCore.Qt.Vertical)
        self.ExtrapolationEfficiencySlider.setInvertedAppearance(False)
        self.ExtrapolationEfficiencySlider.setInvertedControls(False)
        self.ExtrapolationEfficiencySlider.setTickPosition(QtWidgets.QSlider.TicksAbove)
        self.ExtrapolationEfficiencySlider.setTickInterval(0)
        self.ExtrapolationEfficiencySlider.setObjectName("ExtrapolationEfficiencySlider")
        self.label_4 = QtWidgets.QLabel(self.page)
        self.label_4.setGeometry(QtCore.QRect(0, 135, 41, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.page)
        self.label_5.setGeometry(QtCore.QRect(10, 355, 31, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.widget = QtWidgets.QWidget(self.page)
        self.widget.setGeometry(QtCore.QRect(0, 0, 131, 89))
        self.widget.setObjectName("widget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.OneChunkRadioButton = QtWidgets.QRadioButton(self.widget)
        self.OneChunkRadioButton.setObjectName("OneChunkRadioButton")
        self.verticalLayout_3.addWidget(self.OneChunkRadioButton)
        self.MultipleChunksRadioButton = QtWidgets.QRadioButton(self.widget)
        self.MultipleChunksRadioButton.setObjectName("MultipleChunksRadioButton")
        self.verticalLayout_3.addWidget(self.MultipleChunksRadioButton)
        self.NumberChunksSpinBox = QtWidgets.QSpinBox(self.widget)
        self.NumberChunksSpinBox.setMaximum(999)
        self.NumberChunksSpinBox.setObjectName("NumberChunksSpinBox")
        self.verticalLayout_3.addWidget(self.NumberChunksSpinBox)
        self.toolBox.addItem(self.page, "")
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setGeometry(QtCore.QRect(0, 0, 132, 448))
        self.page_2.setObjectName("page_2")
        self.label_6 = QtWidgets.QLabel(self.page_2)
        self.label_6.setGeometry(QtCore.QRect(0, 180, 131, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        
        
        self.InterPolationOrderSlider = QtWidgets.QSlider(self.page_2)
        self.InterPolationOrderSlider.setGeometry(QtCore.QRect(80, 210, 22, 171))
        
        self.InterPolationOrderSlider.setMaximum(9)
        self.InterPolationOrderSlider.setMinimum(2)

        self.InterPolationOrderSlider.setPageStep(9)
        self.InterPolationOrderSlider.setValue(1)
        self.InterPolationOrderSlider.setOrientation(QtCore.Qt.Vertical)
        self.InterPolationOrderSlider.setTickPosition(QtWidgets.QSlider.TicksAbove)
        self.InterPolationOrderSlider.setObjectName("InterPolationOrderSlider")
        
        
        self.order1Label = QtWidgets.QLabel(self.page_2)
        self.order1Label.setGeometry(QtCore.QRect(10, 370, 47, 13))
        self.order1Label.setObjectName("order1Label")
        self.order10Label = QtWidgets.QLabel(self.page_2)
        self.order10Label.setGeometry(QtCore.QRect(0, 210, 61, 16))
        self.order10Label.setObjectName("order10Label")
        self.lcdOrder = QtWidgets.QLCDNumber(self.page_2)
        self.lcdOrder.setGeometry(QtCore.QRect(10, 400, 41, 31))
        self.lcdOrder.setObjectName("lcdOrder")
        self.LCDOrderLabel = QtWidgets.QLabel(self.page_2)
        self.LCDOrderLabel.setGeometry(QtCore.QRect(70, 405, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.LCDOrderLabel.setFont(font)
        self.LCDOrderLabel.setObjectName("LCDOrderLabel")
        self.widget1 = QtWidgets.QWidget(self.page_2)
        self.widget1.setGeometry(QtCore.QRect(0, 10, 121, 42))
        self.widget1.setObjectName("widget1")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_7 = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_6.addWidget(self.label_7)
        self.ChunkNumberComboBox = QtWidgets.QComboBox(self.widget1)
        self.ChunkNumberComboBox.setObjectName("ChunkNumberComboBox")
        self.verticalLayout_6.addWidget(self.ChunkNumberComboBox)
        self.widget2 = QtWidgets.QWidget(self.page_2)
        self.widget2.setGeometry(QtCore.QRect(0, 60, 122, 108))
        self.widget2.setObjectName("widget2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.widget2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_2 = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_4.addWidget(self.label_2)
        self.LinearInterpRadioBtn = QtWidgets.QRadioButton(self.widget2)
        self.LinearInterpRadioBtn.setObjectName("LinearInterpRadioBtn")
        self.verticalLayout_4.addWidget(self.LinearInterpRadioBtn)
        self.PolynomialInterpRadioBtn = QtWidgets.QRadioButton(self.widget2)
        self.PolynomialInterpRadioBtn.setObjectName("PolynomialInterpRadioBtn")
        self.verticalLayout_4.addWidget(self.PolynomialInterpRadioBtn)
        
        self.toolBox.addItem(self.page_2, "")
        self.verticalLayout_2.addWidget(self.toolBox)
        self.horizontalLayout.addWidget(self.FittingOptionsContianer)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout.addWidget(self.line_2)
        self.DataContainer = QtWidgets.QWidget(self.centralwidget)
        self.DataContainer.setMinimumSize(QtCore.QSize(100, 0))
        self.DataContainer.setObjectName("DataContainer")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.DataContainer)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.MathematicsLabel = QtWidgets.QLabel(self.DataContainer)
        self.MathematicsLabel.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.MathematicsLabel.setFont(font)
        self.MathematicsLabel.setObjectName("MathematicsLabel")
        self.verticalLayout_5.addWidget(self.MathematicsLabel)
        
        
        self.MathDisplayArea = QTableWidget(self.DataContainer)
        self.MathDisplayArea.setObjectName("MathDisplayArea")
        self.MathDisplayArea.setMaximumSize(QtCore.QSize(16777215, 270))
        
        self.MathDisplayArea.setColumnCount(2)  
        self.MathDisplayArea.setHorizontalHeaderLabels(["Equation","Error"])	
        self.MathDisplayArea.resizeColumnsToContents()
        self.MathDisplayArea.verticalHeader().setDefaultSectionSize(30)
        
        self.verticalLayout_5.addWidget(self.MathDisplayArea)
        self.ErrorMappingLabel_2 = QtWidgets.QLabel(self.DataContainer)
        self.ErrorMappingLabel_2.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.ErrorMappingLabel_2.setFont(font)
        self.ErrorMappingLabel_2.setObjectName("ErrorMappingLabel_2")
        self.verticalLayout_5.addWidget(self.ErrorMappingLabel_2)
        self.widget_3 = QtWidgets.QWidget(self.DataContainer)
        self.widget_3.setObjectName("widget_3")
        self.ErrorMappingButton = QtWidgets.QPushButton(self.widget_3)
        self.ErrorMappingButton.setGeometry(QtCore.QRect(10, 240, 75, 23))
        self.ErrorMappingButton.setObjectName("ErrorMappingButton")
        self.ErrorMappingProgressBar = QtWidgets.QProgressBar(self.widget_3)
        self.ErrorMappingProgressBar.setGeometry(QtCore.QRect(110, 240, 171, 23))
        self.ErrorMappingProgressBar.setProperty("value", 0)
        self.ErrorMappingProgressBar.setTextVisible(True)
        self.ErrorMappingProgressBar.setOrientation(QtCore.Qt.Horizontal)
        self.ErrorMappingProgressBar.setInvertedAppearance(False)
        self.ErrorMappingProgressBar.setObjectName("ErrorMappingProgressBar")
        self.label_8 = QtWidgets.QLabel(self.widget_3)
        self.label_8.setGeometry(QtCore.QRect(0, 90, 47, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.widget_3)
        self.label_9.setGeometry(QtCore.QRect(0, 120, 47, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.widget3 = QtWidgets.QWidget(self.widget_3)
        self.widget3.setGeometry(QtCore.QRect(70, 80, 221, 31))
        self.widget3.setObjectName("widget3")
        self.xAxisNumChunksRadioBtn = QtWidgets.QRadioButton(self.widget3)
        self.xAxisNumChunksRadioBtn.setGeometry(QtCore.QRect(0, 10, 82, 17))
        self.xAxisNumChunksRadioBtn.setObjectName("xAxisNumChunksRadioBtn")
        self.xAxisInterpolationRadioBtn = QtWidgets.QRadioButton(self.widget3)
        self.xAxisInterpolationRadioBtn.setGeometry(QtCore.QRect(90, 10, 151, 17))
        self.xAxisInterpolationRadioBtn.setObjectName("xAxisInterpolationRadioBtn")
        self.widget_2 = QtWidgets.QWidget(self.widget_3)
        self.widget_2.setGeometry(QtCore.QRect(70, 110, 221, 31))
        self.widget_2.setObjectName("widget_2")
        self.yAxisNumChunksRadioBtn = QtWidgets.QRadioButton(self.widget_2)
        self.yAxisNumChunksRadioBtn.setGeometry(QtCore.QRect(0, 10, 82, 17))
        self.yAxisNumChunksRadioBtn.setObjectName("yAxisNumChunksRadioBtn")
        self.yAxisInterpolationRadioBtn = QtWidgets.QRadioButton(self.widget_2)
        self.yAxisInterpolationRadioBtn.setGeometry(QtCore.QRect(90, 10, 151, 17))
        self.yAxisInterpolationRadioBtn.setObjectName("yAxisInterpolationRadioBtn")
        self.label_10 = QtWidgets.QLabel(self.widget_3)
        self.label_10.setGeometry(QtCore.QRect(0, 0, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.widget_3)
        self.label_11.setGeometry(QtCore.QRect(0, 60, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.ChooseChunkComboBox = QtWidgets.QComboBox(self.widget_3)
        self.ChooseChunkComboBox.setGeometry(QtCore.QRect(140, 0, 131, 22))
        self.ChooseChunkComboBox.setObjectName("ChooseChunkComboBox")
        self.ChooseOrderComboBox = QtWidgets.QComboBox(self.widget_3)
        self.ChooseOrderComboBox.setGeometry(QtCore.QRect(140, 60, 131, 22))
        self.ChooseOrderComboBox.setObjectName("ChooseOrderComboBox")
        self.ChooseOrderComboBox.setMaxCount(999)
        self.ChooseOverLapComboBox = QComboBox(self.widget_3)
        self.ChooseOverLapComboBox.setGeometry(QRect(140, 30, 131, 22))
        self.ChooseOverLapComboBox.setObjectName("ChooseOverLapComboBox")
        self.label_12 = QLabel(self.widget_3)
        self.label_12.setObjectName(u"label_12")
        self.label_12.setGeometry(QRect(0, 30, 131, 16))
        font5 = QFont()
        font5.setPointSize(9)
        font5.setBold(True)
        font5.setWeight(75)
        self.label_12.setFont(font5)

        self.xAxisOverLapRadioBtn = QRadioButton(self.widget_3)
        self.xAxisOverLapRadioBtn.setObjectName("xAxisOverLapRadioBtn")
        self.xAxisOverLapRadioBtn.setGeometry(QRect(280, 90, 121, 17))
        self.yAxisOverLapRadioBtn = QRadioButton(self.widget_3)
        self.yAxisOverLapRadioBtn.setObjectName("yAxisOverLapRadioBtn")
        self.yAxisOverLapRadioBtn.setGeometry(QRect(280, 120, 121, 17))

        self.verticalLayout_5.addWidget(self.widget_3)
        self.horizontalLayout.addWidget(self.DataContainer)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout.addWidget(self.line)
        self.GraphingContainer = QtWidgets.QWidget(self.centralwidget)
        self.GraphingContainer.setMinimumSize(QtCore.QSize(0, 0))
        self.GraphingContainer.setMaximumSize(QtCore.QSize(600, 16777215))
        self.GraphingContainer.setObjectName("GraphingContainer")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.GraphingContainer)
        self.verticalLayout.setObjectName("verticalLayout")
        self.CurveFittingLabel = QtWidgets.QLabel(self.GraphingContainer)
        self.CurveFittingLabel.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.CurveFittingLabel.setFont(font)
        self.CurveFittingLabel.setObjectName("CurveFittingLabel")
        self.verticalLayout.addWidget(self.CurveFittingLabel)
        
        self.CurveFittingGraph = pyqtgraph.GraphicsLayoutWidget(self.GraphingContainer)
        self.CurveFittingGraph.setObjectName("CurveFittingGraph")
        self.verticalLayout.addWidget(self.CurveFittingGraph)
        
        self.line_3 = QtWidgets.QFrame(self.GraphingContainer)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout.addWidget(self.line_3)
        self.ErrorMappingLabel = QtWidgets.QLabel(self.GraphingContainer)
        self.ErrorMappingLabel.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.ErrorMappingLabel.setFont(font)
        self.ErrorMappingLabel.setObjectName("ErrorMappingLabel")
        self.verticalLayout.addWidget(self.ErrorMappingLabel)
        self.ErrorMappingGraph = QTableWidget(self.GraphingContainer)
        self.ErrorMappingGraph.setObjectName("ErrorMappingGraph")
        self.verticalLayout.addWidget(self.ErrorMappingGraph)
        self.horizontalLayout.addWidget(self.GraphingContainer)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuGraphs_Options = QtWidgets.QMenu(self.menubar)
        self.menuGraphs_Options.setObjectName("menuGraphs_Options")
        self.menuCurve_Fitting = QtWidgets.QMenu(self.menuGraphs_Options)
        self.menuCurve_Fitting.setObjectName("menuCurve_Fitting")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_File = QtWidgets.QAction(MainWindow)
        self.actionOpen_File.setObjectName("actionOpen_File")
        self.actionSave_Curve_fitting_IMG = QtWidgets.QAction(MainWindow)
        self.actionSave_Curve_fitting_IMG.setObjectName("actionSave_Curve_fitting_IMG")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionCurveZoom_in = QtWidgets.QAction(MainWindow)
        self.actionCurveZoom_in.setObjectName("actionCurveZoom_in")
        self.actioncurveZoom_out = QtWidgets.QAction(MainWindow)
        self.actioncurveZoom_out.setObjectName("actioncurveZoom_out")
        self.actionRun_EM = QtWidgets.QAction(MainWindow)
        self.actionRun_EM.setObjectName("actionRun_EM")
        self.actionErrorZoom_in_2 = QtWidgets.QAction(MainWindow)
        self.actionErrorZoom_in_2.setObjectName("actionErrorZoom_in_2")
        self.actionErrorZoom_out_2 = QtWidgets.QAction(MainWindow)
        self.actionErrorZoom_out_2.setObjectName("actionErrorZoom_out_2")
        self.menuFile.addAction(self.actionOpen_File)
        self.menuFile.addAction(self.actionSave_Curve_fitting_IMG)
        self.menuFile.addAction(self.actionExit)
        self.menuCurve_Fitting.addAction(self.actionCurveZoom_in)
        self.menuCurve_Fitting.addAction(self.actioncurveZoom_out)
        self.menuGraphs_Options.addAction(self.menuCurve_Fitting.menuAction())
        self.menuGraphs_Options.addSeparator()
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuGraphs_Options.menuAction())

        self.retranslateUi(MainWindow)
        self.toolBox.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.FittingOptionsLabel.setText(_translate("MainWindow", "Fitting Options"))
        self.label_3.setText(_translate("MainWindow", "Extrapolation %"))
        self.label_4.setText(_translate("MainWindow", "100%"))
        self.label_5.setText(_translate("MainWindow", "10%"))
        self.label.setText(_translate("MainWindow", "Num Chunks"))
        self.OneChunkRadioButton.setText(_translate("MainWindow", "One Chunk"))
        self.MultipleChunksRadioButton.setText(_translate("MainWindow", "Multiple Chunks"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page), _translate("MainWindow", "Page 1"))
        self.label_6.setText(_translate("MainWindow", "Order of Interpolation"))
        self.order1Label.setText(_translate("MainWindow", "2nd order"))
        self.order10Label.setText(_translate("MainWindow", "9th order"))
        self.LCDOrderLabel.setText(_translate("MainWindow", "Order"))
        self.label_7.setText(_translate("MainWindow", "Chunk Number"))
        self.label_2.setText(_translate("MainWindow", "Type of Interpolation"))
        self.LinearInterpRadioBtn.setText(_translate("MainWindow", "Linear"))
        self.PolynomialInterpRadioBtn.setText(_translate("MainWindow", "Polynomial"))
        
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_2), _translate("MainWindow", "Page 2"))
        self.MathematicsLabel.setText(_translate("MainWindow", "Mathematics"))
        self.ErrorMappingLabel_2.setText(_translate("MainWindow", "Error Mapping "))
        self.ErrorMappingButton.setText(_translate("MainWindow", "Run EM"))
        self.label_8.setText(_translate("MainWindow", "X-axis"))
        self.label_9.setText(_translate("MainWindow", "Y-axis"))
        self.xAxisNumChunksRadioBtn.setText(_translate("MainWindow", "Num Chunks"))
        self.xAxisInterpolationRadioBtn.setText(_translate("MainWindow", "Interpolation order"))
        self.yAxisNumChunksRadioBtn.setText(_translate("MainWindow", "Num Chunks"))
        self.yAxisInterpolationRadioBtn.setText(_translate("MainWindow", "Interpolation order"))
        self.xAxisOverLapRadioBtn.setText(QCoreApplication.translate("MainWindow", "OverLab"))
        self.yAxisOverLapRadioBtn.setText(QCoreApplication.translate("MainWindow", "OverLab"))
        self.label_10.setText(_translate("MainWindow", "Choose Chunk"))
        self.label_11.setText(_translate("MainWindow", "Choose Order"))
        self.label_12.setText(QCoreApplication.translate("MainWindow", "Choose OverLab"))
        self.CurveFittingLabel.setText(_translate("MainWindow", "Curve Fitting Area"))
        self.ErrorMappingLabel.setText(_translate("MainWindow", "Error Mapping Area"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuGraphs_Options.setTitle(_translate("MainWindow", "Graphs Options"))
        self.menuCurve_Fitting.setTitle(_translate("MainWindow", "Curve Fitting"))
        self.actionOpen_File.setText(_translate("MainWindow", "Open File"))
        self.actionOpen_File.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave_Curve_fitting_IMG.setText(_translate("MainWindow", "Save Curve fitting IMG"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "esc"))
        self.actionCurveZoom_in.setText(_translate("MainWindow", "Zoom in"))
        self.actionCurveZoom_in.setShortcut(_translate("MainWindow", "+"))
        self.actioncurveZoom_out.setText(_translate("MainWindow", "Zoom out"))
        self.actioncurveZoom_out.setShortcut(_translate("MainWindow", "-"))
        self.actionRun_EM.setText(_translate("MainWindow", "Run EM"))
        self.actionRun_EM.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionErrorZoom_in_2.setText(_translate("MainWindow", "Zoom in"))
        self.actionErrorZoom_in_2.setShortcut(_translate("MainWindow", "Ctrl+="))
        self.actionErrorZoom_out_2.setText(_translate("MainWindow", "Zoom out"))
        self.actionErrorZoom_out_2.setShortcut(_translate("MainWindow", "Ctrl+-"))

        #buttons connections 
        self.actionOpen_File.triggered.connect(lambda: self.openFile())
        self.actionCurveZoom_in.triggered.connect(lambda: self.zoomIn(0))
        self.actionErrorZoom_in_2.triggered.connect(lambda: self.zoomIn(1))
        self.actioncurveZoom_out.triggered.connect(lambda: self.zoomOut(0))
        self.actionErrorZoom_out_2.triggered.connect(lambda: self.zoomOut(1))
        self.OneChunkRadioButton.toggled.connect(lambda: self.NumberChunksSpinBoxDisable())
        self.MultipleChunksRadioButton.toggled.connect(lambda: self.NumberChunksSpinBoxEnable())
        self.NumberChunksSpinBox.valueChanged.connect(lambda: self.SetNumChunks(self.NumberChunksSpinBox.value()))
        self.xAxisInterpolationRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("X","Inter"))
        self.xAxisNumChunksRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("X","Chunks"))
        self.yAxisInterpolationRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("Y","Inter"))
        self.yAxisNumChunksRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("Y","Chunks"))
        self.xAxisOverLapRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("X","Over"))
        self.yAxisOverLapRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("Y","Over"))
        
        self.actionExit.triggered.connect(lambda: self.exit())
        self.InterPolationOrderSlider.valueChanged.connect(lambda: self.InterpolationOrdersetting(self.InterPolationOrderSlider.value()) )
        #self.InterPolationOrderSlider.valueChanged.connect(lambda : self.interpolationPrep())
        self.ExtrapolationEfficiencySlider.valueChanged.connect(lambda: self.ExtrapolationCoefEdit(self.ExtrapolationEfficiencySlider.value()))
        self.LinearInterpRadioBtn.toggled.connect(lambda: self.interpolationPrep(0))
        self.PolynomialInterpRadioBtn.toggled.connect(lambda : self.interpolationPrep(1))
        self.ChunkNumberComboBox.currentIndexChanged.connect(lambda : self.setChunkOrder())
        self.ErrorMappingButton.clicked.connect(lambda: self.errorMappingClicked())
        

        #golbal varaibles of constants declaration
        self.feature=0
        self.target=0
        self.ampArray=0
        self.signalYMin=0
        self.signalYMax=0
        self.signalXmin=0
        self.signalXmax=0
        self.numChunks=1  
        self.overLappingTimes=6     
        self.Chunkorder=0
        self.polyVectors = np.array([])
        self.axis=""
        self.type=""
        self.errorMappingClickedTime=0
        #setting order default to 1
        self.InterpolationOrder=self.InterPolationOrderSlider.value()
        self.lcdOrder.display(self.InterpolationOrder)
        self.interpolationTypeFlag=-1

        self.errorComboBoxFlag = 0

        #diasbling the num spinbox by default to avoid errors
        self.NumberChunksSpinBox.setDisabled(True)
        #changing LCD color
        self.lcdOrder.setStyleSheet('background-color:black')
        #setting extrapolation coeff to 100% by default
        self.ExtrapolationCoef=100
        self.p=self.CurveFittingGraph.addPlot()   
        self.original_curve = self.p.plot()
        self.interpolated_curve = self.p.plot()
        self.ExtrapolatedCurve=self.p.plot()
        

        #Functions declarations
    def openFile(self):
      self.file_path=QFileDialog.getOpenFileName()[0]
      try:
          self.read_data(self.file_path)
      except:
          print("please choose a csv file")

    def read_data(self,file_name):
        """loads the data from chosen file"""
        dataFile=pd.read_csv(r"{}".format(file_name))
        self.label1=file_name
        self.feature=list(pd.to_numeric(dataFile.iloc[:,0],downcast="float"))
        self.target=list(pd.to_numeric(dataFile.iloc[:,-1],downcast="float"))
        self.signalYMin=min(self.target)
        self.signalYMax=max(self.target)
        self.signalXMin=min(self.feature)
        self.signalXMax=max(self.feature)
        self.settingCurveLimits()
        #print(numpy.linalg.norm(dataFile))
        self.draw(self.feature,self.target)

    def settingCurveLimits(self):
        self.p.setLimits(xMin=self.signalXMin)
        #self.p.setLimits(yMin=self.signalYMin)
        #self.p.setLimits(yMax=self.signalYMax)

    def setChunkOrder(self):
        self.Chunkorder= int(self.ChunkNumberComboBox.currentIndex())+1
        if( self.PolynomialInterpRadioBtn.isChecked() or self.LinearInterpRadioBtn.isChecked):
            if(self.interpolationTypeFlag ==0):
                self.linearInterpolate()
            elif(self.interpolationTypeFlag ==1):
                self.polyInterpolate()
            else:
                print("Please choose an interpolation type from the radio buttons")
        else:
            pass
        

     #   print(self.Chunkorder)

    def draw(self,time,amp):
        """sets up our canvas to plot"""
        self.index=0  
        self.original_curve.setData(self.feature[0:self.index+1000], self.target[0:self.index+1000], pen="#683b94")
        try:
          self.InterpolationOrdersetting()
          self.ChunkNumberComboBox()
          self.ChooseChunkComboBox()
        except:
            pass
        
    def zoomIn(self, val):
        self.p.getViewBox().scaleBy((0.5,0.5))
        
    
    def zoomOut(self,val):
        self.p.getViewBox().scaleBy((2,2))

    def errorMappingClicked(self):
        self.errorMappingClickedTime=self.errorMappingClickedTime+1
        if self.errorMappingClickedTime % 2 != 0:
            self.ErrorMappingButton.setText("Stop EM")
            self.errorMappingRun(1)
        elif self.errorMappingClickedTime %2 ==0:
            self.ErrorMappingButton.setText("Run EM")
            self.errorMappingRun(0)

    def errorMappingRun(self,text):
        if text == 1:
            if self.ErrorMapXaxis == "Chunks" and self.ErrorMapYaxis == "Inter":
                if self.interpolationTypeFlag == 0 and self.numChunks ==1:
                    self.result=numpy.linalg.norm(self.target)-numpy.linalg.norm(self.y_axis)/numpy.linalg.norm(self.target)
                    #print(self.result)
                    self.color=int(self.result)
                    for i in range (self.numChunks):
                        for j in range (self.InterPolationOrderSlider.value()):
                            self.ErrorMappingGraph.setItem(i,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i,j).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))
                
                
                            
                elif self.interpolationTypeFlag ==0 and self.numChunks >1 :
                    
                    self.fixedOverLapValue=int((int(self.ChooseOverLapComboBox.currentText())/100) * len(self.x_axis))
                    #print(self.fixedOverLapValue)
                    for i in range(1,self.numChunks+1,1):
                        
                        for j in range (self.InterPolationOrderSlider.value()):
                                #self.result=numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*i:self.fixedOverLapValue+ len(self.x_axis)*(i+1) if i < self.numChunks else 1000])-numpy.linalg.norm(self.y_axis[self.fixedOverLapValue+ len(self.x_axis)*i:self.fixedOverLapValue+ len(self.x_axis)*(i+1) if i < self.numChunks else 1000])/numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*i:self.fixedOverLapValue+ len(self.x_axis)*(i+1) if i < self.numChunks else 1000])
                                #print(self.result)
                                coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1]  ,deg=1)
                                self.polyVectors = coeff
                                polynomial= np.poly1d(coeff)
                                self.targetError=self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                                self.y_axisError=polynomial(self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                                self.result=numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks+1 else 1000])-numpy.linalg.norm(self.y_axis[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])
                                self.color=int(self.result)
                                self.ErrorMappingGraph.setItem(i-1,j,QTableWidgetItem())
                                self.ErrorMappingGraph.item(i-1,j).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))
                            
                elif self.interpolationTypeFlag == 1 and self.numChunks ==1:
                   
                    self.result=numpy.linalg.norm(self.target)-numpy.linalg.norm(self.y_axis)/numpy.linalg.norm(self.target)
                    #print(self.result)
                    self.color=int(self.result)
                    for i in range (self.numChunks):
                        for j in range (self.InterPolationOrderSlider.value()):
                            self.ErrorMappingGraph.setItem(i,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i,j).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))

                elif self.interpolationTypeFlag == 1 and self.numChunks >1 :
                    self.fixedOverLapValue=int((int(self.ChooseOverLapComboBox.currentText())/100) * len(self.x_axis))
                    for i in range (1,self.numChunks+1,1):
                        for j in range (self.InterPolationOrderSlider.value()):

                            coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1] ,deg = self.InterpolationOrder)
                            polynomial= np.poly1d(coeff) 
                            self.targetError=self.target[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks+1 else 1000])-numpy.linalg.norm(self.y_axis[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])
                            print(self.result)
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i-1,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i-1,j).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))
             

                self.ErrorMappingButton.setText("Run EM")

            elif self.ErrorMapXaxis == "Inter" and self.ErrorMapYaxis == "Chunks":
                if self.interpolationTypeFlag == 0 and self.numChunks ==1:
                    self.result=numpy.linalg.norm(self.target)-numpy.linalg.norm(self.y_axis)/numpy.linalg.norm(self.target)
                    print(self.result)
                    self.color=int(self.result)
                    for i in range (self.InterPolationOrderSlider.value()):
                        for j in range (self.numChunks):
                            self.ErrorMappingGraph.setItem(i+1,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i+1,j).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))

                elif self.interpolationTypeFlag ==0 and self.numChunks > 1:
                    self.fixedOverLapValue=int((int(self.ChooseOverLapComboBox.currentText())/100) * len(self.x_axis))
              
                    #self.result=numpy.linalg.norm(self.target)-numpy.linalg.norm(self.y_axis)/numpy.linalg.norm(self.target)
                    #print(self.result)
                    for i in range (1,self.InterPolationOrderSlider.value()+1,1):
                        for j in range (self.numChunks):
                            coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1] ,deg = 1)
                            polynomial= np.poly1d(coeff)
                            self.targetError=self.target[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks+1 else 1000])-numpy.linalg.norm(self.y_axis[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])
                            print(self.result)
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i-1,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i-1,j).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))
                    
                elif self.interpolationTypeFlag ==1 and self.numChunks ==1 :
                    self.result=numpy.linalg.norm(self.target)-numpy.linalg.norm(self.y_axis)/numpy.linalg.norm(self.target)
                    #print(self.result)
                    self.color=int(self.result)
                    for i in range (self.InterPolationOrderSlider.value()):
                        for j in range (self.numChunks):
                            self.ErrorMappingGraph.setItem(i+1,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i+1,j).setBackground(QtGui.QColor(self.result*1,self.result*1,self.color*10))

                elif self.interpolationTypeFlag ==1 and self.numChunks >1 :
                    self.fixedOverLapValue=int((int(self.ChooseOverLapComboBox.currentText())/100) * len(self.x_axis))
                    for i in range (1,self.InterPolationOrderSlider.value()+1,1):
                        for j in range (self.numChunks):
                            coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1] ,deg = self.InterpolationOrder)
                            polynomial= np.poly1d(coeff) 
                            self.targetError=self.target[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            #self.result=numpy.linalg.norm(self.targetError)-numpy.linalg.norm(self.y_axisError)/numpy.linalg.norm(self.targetError)
                            self.result=numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks+1 else 1000])-numpy.linalg.norm(self.y_axis[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i-1,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i-1,j).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))
                    

                self.ErrorMappingButton.setText("Run EM")
            elif self.ErrorMapXaxis == "Over" and self.ErrorMapYaxis == "Chunks":
                if self.interpolationTypeFlag==0:
                    self.fixedOrderValue=self.ChooseOrderComboBox.currentIndex()+1
                    #self.fixedOverLapValue=int((int(self.ChooseOverLapComboBox.currentText())/100) * len(self.x_axis))
                    self.OverLapConst=0
                    for i in range (6):
                        for j in range(1,self.numChunks+1,1):
                            
                            self.OverLapValue=int((self.OverLapConst/100) * len(self.x_axis))
                            coeff=np.polyfit(self.feature[(j-1)*int(self.maxLength/self.numChunks) : (j*int(self.maxLength/self.numChunks))-1 ] , self.target[(j-1)*int(self.maxLength/self.numChunks) : (j*int(self.maxLength/self.numChunks))-1] ,deg = 1)
                            polynomial= np.poly1d(coeff)
                            self.targetError=self.target[(j-1)*int(self.maxLength/self.numChunks):(j-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(j-1)*int(self.maxLength/self.numChunks):(j-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])-numpy.linalg.norm(self.y_axis[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])
                            print(self.result)
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i,j-1,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i,j-1).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))
                            
                        self.OverLapConst=self.OverLapConst+5
                
                elif self.interpolationTypeFlag == 1:
                    self.fixedOrderValue=self.ChooseOrderComboBox.currentIndex()+1
                    self.OverLapConst=0
                    for i in range(6):
                        for j in range(1,self.numChunks+1,1):
                            self.OverLapValue=int((self.OverLapConst/100) * len(self.x_axis))
                            coeff=np.polyfit(self.feature[(j-1)*int(self.maxLength/self.numChunks) : (j*int(self.maxLength/self.numChunks))-1 ] , self.target[(j-1)*int(self.maxLength/self.numChunks) : (j*int(self.maxLength/self.numChunks))-1] ,deg = self.fixedOrderValue)
                            self.polyVectors = coeff
                            polynomial= np.poly1d(coeff) 
                            self.targetError=self.target[(j-1)*int(self.maxLength/self.numChunks):(j-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(j-1)*int(self.maxLength/self.numChunks):(j-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            #self.result=numpy.linalg.norm(self.targetError)-numpy.linalg.norm(self.y_axisError)/numpy.linalg.norm(self.targetError)
                            self.result=numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])-numpy.linalg.norm(self.y_axis[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i,j-1,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i,j-1).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))
                        
                        self.OverLapConst=self.OverLapConst+5

                self.ErrorMappingButton.setText("Run EM")


            elif self.ErrorMapXaxis == "Chunks" and self.ErrorMapYaxis == "Over":
                if self.interpolationTypeFlag == 0:
                    self.fixedOrderValue= self.ChooseOrderComboBox.currentIndex()+1
                    self.OverLapConst=0
                    for i in range (1,self.numChunks+1,1):
                        for j in range (6):
                            self.OverLapValue=int((self.OverLapConst/100) * len(self.x_axis))
                            coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1] ,deg = 1)
                            polynomial= np.poly1d(coeff)
                            self.targetError=self.target[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])-numpy.linalg.norm(self.y_axis[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])
                            print(self.result)
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i-1,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i-1,j).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))

                        self.OverLapConst=self.OverLapConst+5

                elif self.interpolationTypeFlag == 1:
                    self.fixedOrderValue= self.ChooseOrderComboBox.currentIndex()+1
                    self.OverLapConst=0
                    for i in range (1,self.numChunks+1,1):
                        for j in range (6):
                            self.OverLapValue=int((self.OverLapConst/100) * len(self.x_axis))
                            coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1] ,deg = self.fixedOrderValue)
                            polynomial= np.poly1d(coeff)
                            self.targetError=self.target[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])-numpy.linalg.norm(self.y_axis[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])
                            print(self.result)
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i-1,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i-1,j).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))

                        self.OverLapConst=self.OverLapConst+5


                self.ErrorMappingButton.setText("Run EM")

            elif self.ErrorMapXaxis == "Over" and self.ErrorMapYaxis == "Inter":
                if self.interpolationTypeFlag == 0:
                    self.fixedChunkValue= self.ChooseChunkComboBox.currentIndex()+1
                    self.OverLapConst =0 
                    for i in range (6):
                        for j in range(1,self.InterPolationOrderSlider.value()+1,1):
                            self.OverLapValue=int((self.OverLapConst/100) * len(self.x_axis))
                            coeff=np.polyfit(self.feature[(j-1)*int(self.maxLength/self.numChunks) : (j*int(self.maxLength/self.numChunks))-1 ] , self.target[(j-1)*int(self.maxLength/self.numChunks) : (j*int(self.maxLength/self.numChunks))-1] ,deg = 1)
                            polynomial= np.poly1d(coeff)
                            self.targetError=self.target[(j-1)*int(self.maxLength/self.numChunks):(j-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(j-1)*int(self.maxLength/self.numChunks):(j-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])-numpy.linalg.norm(self.y_axis[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])
                            print(self.result)
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i,j-1,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i,j-1).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))

                        self.OverLapConst=self.OverLapConst+5
                
                elif self.interpolationTypeFlag == 1:
                    self.fixedChunkValue= self.ChooseChunkComboBox.currentIndex()+1
                    self.OverLapConst =0 
                    for i in range (6):
                        for j in range(1,self.InterPolationOrderSlider.value()+1,1):
                            self.OverLapValue=int((self.OverLapConst/100) * len(self.x_axis))
                            coeff=np.polyfit(self.feature[(j-1)*int(self.maxLength/self.numChunks) : (j*int(self.maxLength/self.numChunks))-1 ] , self.target[(j-1)*int(self.maxLength/self.numChunks) : (j*int(self.maxLength/self.numChunks))-1] ,deg = j)
                            polynomial= np.poly1d(coeff)
                            self.targetError=self.target[(j-1)*int(self.maxLength/self.numChunks):(j-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(j-1)*int(self.maxLength/self.numChunks):(j-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])-numpy.linalg.norm(self.y_axis[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(j-1):self.OverLapValue+ len(self.x_axis)*j if j < self.numChunks-1 else 1000])
                            print(self.result)
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i,j-1,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i,j-1).setBackground(QtGui.QColor(self.color*1,self.color*1,self.color*10))

                        self.OverLapConst=self.OverLapConst+5

                self.ErrorMappingButton.setText("Run EM")

            elif self.ErrorMapXaxis == "Inter" and self.ErrorMapYaxis == "Over":
                if self.interpolationTypeFlag == 0:
                    self.fixedChunkValue= self.ChooseChunkComboBox.currentIndex()+1
                    self.OverLapConst =0 
                    for i in range(1,self.InterPolationOrderSlider.value()+1,1):
                        for j in range (6):
                            self.OverLapValue=int((self.OverLapConst/100) * len(self.x_axis))
                            coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1] ,deg = 1)
                            polynomial= np.poly1d(coeff)
                            self.targetError=self.target[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])-numpy.linalg.norm(self.y_axis[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])
                            print(self.result)
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i-1,j,QTableWidgetItem())
                            self.ErrorMappingGraph.item(i-1,j).setBackground(QtGui.QColor(self.color*1,self.color*1,10*self.color))
                        self.OverLapConst=self.OverLapConst+5

                elif self.interpolationTypeFlag == 1:
                    self.fixedChunkValue =self.ChooseChunkComboBox.currentIndex()+1
                    self.OverLapConst =0
                    for i in range(1,self.InterPolationOrderSlider.value()+1,1):
                        for j in range (6):
                            self.OverLapValue=int((self.OverLapConst/100) * len(self.x_axis))
                            coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1] ,deg = i)
                            polynomial= np.poly1d(coeff)
                            self.targetError=self.target[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])-numpy.linalg.norm(self.y_axis[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.OverLapValue+ len(self.x_axis)*(i-1):self.OverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])
                            print(self.result)
                            self.color=int(self.result)
                            self.ErrorMappingGraph.setItem(i-1,j,QTableWidgetItem(str(self.result)))
                            self.ErrorMappingGraph.item(i-1,j).setBackground(QtGui.QColor(1*self.color,1*self.color,10*self.color))
                        self.OverLapConst=self.OverLapConst+5
                        
            self.ErrorMappingButton.setText("Run EM")
        elif text==0:
            self.ErrorMappingGraph.clearContents()

                         
    def NumberChunksSpinBoxDisable(self):
        self.NumberChunksSpinBox.setDisabled(True)
        self.numChunks=1
        self.ChooseOverLapComboBox.clear()
        self.xAxisOverLapRadioBtn.setDisabled(True)
        self.yAxisOverLapRadioBtn.setDisabled(True)
        self.ChunkNumberComboBoxEdit()
        self.ErrorOptionsEnabling(self.axis,self.type)
        self.MathDisplayArea.setRowCount(self.numChunks)


    def NumberChunksSpinBoxEnable(self):
        self.NumberChunksSpinBox.setDisabled(False)

    def SetNumChunks(self,val):
        self.numChunks=val
        
        self.MathDisplayArea.setRowCount(self.numChunks)
        self.ChunkNumberComboBoxEdit()
        self.ErrorOptionsEnabling(self.axis,self.type)
      #  print("num Chunks   ")
       # print(self.numChunks)

    def ErrorOptionsEnabling(self, axis, type):
        self.axis=axis
        self.type=type
        
        if axis=="X":
            if type =="Inter":
                self.yAxisInterpolationRadioBtn.setDisabled(True)
                self.yAxisNumChunksRadioBtn.setDisabled(False)
                self.yAxisOverLapRadioBtn.setDisabled(False)
                self.ErrorMapXaxis="Inter"

                #self.ErrorMapYaxis="Chunks"

                self.ErrorMappingGraph.setRowCount(self.InterPolationOrderSlider.value())
                #self.ErrorMappingGraph.setColumnCount(self.numChunks)
                #self.ErrorMappingGraph.setColumnCount(self.InterPolationOrderSlider.value())
            elif type == "Chunks":
                self.yAxisNumChunksRadioBtn.setDisabled(True)
                self.yAxisInterpolationRadioBtn.setDisabled(False)
                self.yAxisOverLapRadioBtn.setDisabled(False)
                self.ErrorMapXaxis="Chunks"
                #self.ErrorMapYaxis="Inter"
                self.ErrorMappingGraph.setRowCount(self.numChunks)
                #self.ErrorMappingGraph.setColumnCount(self.InterPolationOrderSlider.value())
            else:
                self.yAxisOverLapRadioBtn.setDisabled(True)
                self.yAxisInterpolationRadioBtn.setDisabled(False)
                self.yAxisNumChunksRadioBtn.setDisabled(False)
                self.ErrorMapXaxis="Over"
                self.ErrorMappingGraph.setRowCount(self.overLappingTimes)
        elif axis=="Y":
            if type =="Inter":
                self.xAxisInterpolationRadioBtn.setDisabled(True)
                self.xAxisNumChunksRadioBtn.setDisabled(False)
                self.xAxisOverLapRadioBtn.setDisabled(False)
                #self.ErrorMapXaxis="Chunks"
                self.ErrorMapYaxis="Inter"
                #self.ErrorMappingGraph.setRowCount(self.InterPolationOrderSlider.value())
                #self.ErrorMappingGraph.setColumnCount(self.numChunks)
                self.ErrorMappingGraph.setColumnCount(self.InterPolationOrderSlider.value())

            elif type =="Chunks":
                self.xAxisNumChunksRadioBtn.setDisabled(True)
                self.xAxisInterpolationRadioBtn.setDisabled(False)
                self.xAxisOverLapRadioBtn.setDisabled(False)
                #self.ErrorMapYaxis="Chunks"
                self.ErrorMapYaxis="Chunks"
                #self.ErrorMappingGraph.setRowCount(self.numChunks)
                #self.ErrorMappingGraph.setColumnCount(self.InterpolationOrder)
                self.ErrorMappingGraph.setColumnCount(self.numChunks)

            else:
                self.xAxisOverLapRadioBtn.setDisabled(True)
                self.xAxisInterpolationRadioBtn.setDisabled(False)
                self.xAxisNumChunksRadioBtn.setDisabled(False)
                self.ErrorMapYaxis="Over"
                self.ErrorMappingGraph.setColumnCount(self.overLappingTimes)
        if self.numChunks >1 and self.errorComboBoxFlag == 0:
            self.xAxisOverLapRadioBtn.setDisabled(False)
            self.yAxisOverLapRadioBtn.setDisabled(False)
            for i in range (0,30,5):
                self.ChooseOverLapComboBox.addItem(str(i))
            self.errorComboBoxFlag=1
        

    def ChunkNumberComboBoxEdit(self):
        self.ChooseChunkComboBox.clear()
        self.ChunkNumberComboBox.clear()
        
        for i in np.arange(1,self.numChunks+1):
            self.ChunkNumberComboBox.addItem(str("Chunk # " +str(i)))
            self.ChooseChunkComboBox.addItem(str("Chunk # " +str(i)))
        

        self.ErrorOptionsEnabling(self.axis,self.type)

    
    def ChooseOrderComboBoxEdit(self):
        self.ChooseOrderComboBox.clear()
        self.lcdOrder.display(self.InterpolationOrder)
        for j in np.arange(1,self.InterpolationOrder+1):
            self.ChooseOrderComboBox.addItem(str("Order # " +str(j)))

        self.ErrorOptionsEnabling(self.axis,self.type)

    
    def interpolationPrep(self, val):
        if val == 0:
            self.interpolationTypeFlag =0
            self.linearInterpolate()
        elif val ==1:
            self.interpolationTypeFlag =1
            self.polyInterpolate()
        else:
            print("Choose an intrpolation type from the radio buttons")

    def linearInterpolate(self):
        if self.ExtrapolationCoef ==0:
            print("Please check the extrapolation slider as there mush be an error in its code lines")
        else:
            self.maxLength=int(self.ExtrapolationCoef* 1000 *0.01)
            print(self.maxLength)
            if self.numChunks==1:
                coeff,residual,a,b,c=np.polyfit(self.feature , self.target ,deg =1,full=True)
                polynomial= np.poly1d(coeff)
                self.x_axis=self.feature[0:self.maxLength-1]
                self.y_axis=polynomial(self.feature[0:self.maxLength-1])
                self.interpolated_curve.setData(self.x_axis,self.y_axis, pen=None , symbol = '+')
                self.linear_latex_equation(coeff)
                self.write_error(residual)           
            else:
                coeff,residual,a,b,c=np.polyfit(self.feature[(self.Chunkorder-1)*int(self.maxLength/self.numChunks) : (self.Chunkorder*int(self.maxLength/self.numChunks))-1 ] , self.target[(self.Chunkorder-1)*int(self.maxLength/self.numChunks) : (self.Chunkorder*int(self.maxLength/self.numChunks))-1]  ,deg=1,full=True)
                polynomial= np.poly1d(coeff)
                self.x_axis=self.feature[(self.Chunkorder-1)*int(self.maxLength/self.numChunks):(self.Chunkorder-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                self.y_axis=polynomial(self.feature[(self.Chunkorder-1)*int(self.maxLength/self.numChunks):(self.Chunkorder-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])               
                self.interpolated_curve.setData(self.x_axis,self.y_axis, pen=None ,symbol='+')
                self.linear_latex_equation(coeff)
                self.write_error(residual)   
            self.ExtrapolationFunc(coeff)
    
    def polyInterpolate(self):
        if self.ExtrapolationCoef ==0:
            print("Please check the extrapolation slider as there mush be an error in its code lines")
        else:
            self.maxLength=int(self.ExtrapolationCoef* 1000 *0.01)
            if self.numChunks==1:
                coeff,residual,a,b,c=np.polyfit(self.feature , self.target ,deg =self.InterpolationOrder,full=True)
                polynomial= np.poly1d(coeff)
                self.x_axis=self.feature[0:self.index+self.maxLength]
                self.y_axis=polynomial(self.feature[0:self.index+self.maxLength])
                self.interpolated_curve.setData(self.x_axis,self.y_axis, pen=None ,symbol='o')
                self.polynomial_latex_equation(coeff)
                self.write_error(residual)            
            else:
                coeff,residual,a,b,c=np.polyfit(self.feature[(self.Chunkorder-1)*int(self.maxLength/self.numChunks) : (self.Chunkorder*int(self.maxLength/self.numChunks))-1 ] , self.target[(self.Chunkorder-1)*int(self.maxLength/self.numChunks) : (self.Chunkorder*int(self.maxLength/self.numChunks))-1] ,deg = self.InterpolationOrder,full=True)
                polynomial= np.poly1d(coeff) 
                self.x_axis=self.feature[(self.Chunkorder-1)*int(self.maxLength/self.numChunks):(self.Chunkorder-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                self.y_axis=polynomial(self.feature[(self.Chunkorder-1)*int(self.maxLength/self.numChunks):(self.Chunkorder-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                self.interpolated_curve.setData(self.x_axis,self.y_axis, pen=None ,symbol='o')
                self.polynomial_latex_equation(coeff)
                self.write_error(residual)

            self.ExtrapolationFunc(coeff)

    def ExtrapolationFunc(self, coeff):
        if self.numChunks != 1:
            pass
        else:
            if self.ExtrapolationCoef ==100:
                pass
            elif self.ExtrapolationCoef <100:
                polynomial= np.poly1d(coeff)
                print(int((1000*0.01*self.ExtrapolationCoef)))
                self.x_axis=self.feature[int((1000*0.01*self.ExtrapolationCoef)+5):5000]
                self.y_axis=polynomial(self.feature[int((1000*0.01*self.ExtrapolationCoef)+5):5000])
                self.ExtrapolatedCurve.setData(self.x_axis,self.y_axis, pen=None , symbol = '+')
                print(polynomial)


    
    def InterpolationOrdersetting(self, val):
        self.InterpolationOrder=val
        self.ChooseOrderComboBoxEdit()
        if self.interpolationTypeFlag ==1:
            self.polyInterpolate()
        else:
            self.interpolationPrep(0)
        #if val==0:
         #   self.xAxisInterpolationRadioBtn.setChecked(False)
          #  self.xAxisNumChunksRadioBtn.setChecked(False)
           # self.yAxisNumChunksRadioBtn.setChecked(False)
            #self.yAxisInterpolationRadioBtn.setChecked(False)
    
    def ExtrapolationCoefEdit(self, val):
        self.ExtrapolationCoef=val*10
        print(self.ExtrapolationCoef)
        self.interpolationPrep(self.interpolationTypeFlag)
        
    def exit(self):
        sys.exit()


    def linear_latex_equation(self,coeff):
        """writes latex equation for a linear interpolation"""
        #getting signed and rounded coeffecients
        coeff=list(coeff)
        for i in range(0,len(coeff)):
            coeff[i]=round(coeff[i],3)
            if (coeff[i]>0):
                coeff[i]="+"+str(coeff[i])
 
        label=self.mathTex_to_QPixmap(r'{} x {}'.format(coeff[0],coeff[1]))
        self.MathDisplayArea.setCellWidget(self.Chunkorder-1,0,label)
        self.adjust_table()

    
    def polynomial_latex_equation(self,coeff):
        """writes latex equation for a polynomial interpolation"""
        
        #getting signed and rounded coeffecients
        coeff=list(coeff)
        for i in range(0,len(coeff)):
            coeff[i]=round(coeff[i],3)
            if (coeff[i]>0):
                coeff[i]="+"+str(coeff[i])
                
        eq=r'{}x^{}'.format(coeff[0],self.InterpolationOrder)
        for i in range(self.InterpolationOrder-1,1,-1):
            eq+=r'{}x^{}'.format(coeff[self.InterpolationOrder-i],i)
        eq+=r'{}x{}'.format(coeff[-2],coeff[-1])        
        
        label=self.mathTex_to_QPixmap(eq)
        self.MathDisplayArea.setCellWidget(self.Chunkorder-1,0,label)
        self.adjust_table() 
        

    
    
    def adjust_table(self):
        """adjusts size of rows and columns according to content"""
        self.MathDisplayArea.resizeRowsToContents()        
        self.MathDisplayArea.resizeColumnsToContents()	    
    
    def mathTex_to_QPixmap(self,mathTex):
     """converts equation into a pixmap and puts it on a label widget"""
    # set up a mpl figure instance
     fig = mpl.figure.Figure()
     fig.patch.set_facecolor('none')
     fig.set_canvas(FigureCanvasAgg(fig))
     renderer = fig.canvas.get_renderer()

    #plot the mathTex expression
     ax = fig.add_axes([0, 0, 1, 1])
     ax.axis('off')
     ax.patch.set_facecolor('none')
     t = ax.text(0, 0, r"$%s$" %(mathTex), ha='left', va='bottom', fontsize=15,color='blue')

    #fit figure size 
     fwidth, fheight = fig.get_size_inches()
     fig_bbox = fig.get_window_extent(renderer)
     text_bbox = t.get_window_extent(renderer)
     tight_fwidth = text_bbox.width * fwidth / fig_bbox.width
     tight_fheight = text_bbox.height * fheight / fig_bbox.height
     fig.set_size_inches(tight_fwidth, tight_fheight)

    #convert mpl figure to QPixmap and put it on a label widget
     buf, size = fig.canvas.print_to_buffer()
     qimage = QtGui.QImage.rgbSwapped(QtGui.QImage(buf, size[0], size[1],QtGui.QImage.Format_ARGB32))
     qpixmap = QtGui.QPixmap(qimage)
     label = QtWidgets.QLabel()
     label.setPixmap(qpixmap)
     return label

    def write_error(self,residual):
        """writes the error of interpolation in table"""
        error=cmath.sqrt(residual[0])
        error=round(error.real,3)
        self.MathDisplayArea.setItem(self.Chunkorder-1,1,QTableWidgetItem(str(error)))        
        self.adjust_table()
        pass

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())